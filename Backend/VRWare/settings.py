"""
Django settings for VRWare project.
Generated by 'django-admin startproject' using Django 2.2.4.
For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from configparser import RawConfigParser
import logging
import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # /home/logan/FCRWebApp/Backend

env = environ.Env()

environ.Env.read_env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q*c06+=)tz%pcs=a5#*mcx&@zg$pmle-cdy*lxjgxq9ydgd=vi'

# SECURITY WARNING: don't run with debug turned on in production!
# NOTE: 'False' removes styles from django-admin
# use this so that just by changing this, Django is ready for prod
# DEBUG = DEBUG_MODE # True by default. Needed to change it to False so that we can see what a live site would show 
DEBUG = env.bool('DEBUG_MODE') # True by default. Needed to change it to False so that we can see what a live site would show 

SESSION_COOKIE_AGE = 1209600

FRONTEND_URL = env('FRONTEND_URL')
BACKEND_URL = env('BACKEND_URL')

AWS_ACCESS_KEY_ID=env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY=env('AWS_SECRET_ACCESS_KEY')
AWS_REGION=env('AWS_REGION')

S3_BUCKET_NAME = env('S3_BUCKET_NAME')
S3_URL = env('S3_URL')
AWS_TRANSCRIBE_OUTPUT_BUCKET = env('AWS_TRANSCRIBE_OUTPUT_BUCKET')

CELERY_BROKER_URL=env('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND=env('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

if DEBUG is True:
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
    SESSION_COOKIE_SECURE = False
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOW_CREDENTIALS = True
else:
    ALLOWED_HOSTS = ['api.vrware.tech', '18.223.129.197']
    CSRF_TRUSTED_ORIGINS = ['vrware.tech', 'www.vrware.tech']
    CSRF_COOKIE_DOMAIN = 'vrware.tech'
    # Leaving this setting off isn't a good idea because an attacker could capture an unencrypted session cookie with a packet sniffer and user the cookie to hijack the user's session
    SESSION_COOKIE_SECURE = True
    CORS_ALLOW_CREDENTIALS = True
    CORS_ORIGIN_WHITELIST = [
        "https://vrware.tech",
        "https://www.vrware.tech"
    ]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'profile', 
    'audioanalysis',
    'users',
    'cohort',
    'corsheaders',
    'social_django'
]

# Removed     'django.middleware.csrf.CsrfViewMiddleware', (https://stackoverflow.com/a/22812799/9599554)
MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
]

ROOT_URLCONF = 'VRWare.urls'
# needed to add 'templates' so that Django will know to look for the new templates folder
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'VRWare.wsgi.application'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = env('EMAIL_HOST')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_USER = env('SEND_EMAIL_FROM')
EMAIL_HOST_PASSWORD = env('EMAIL_PASSWORD')

DJANGO_ENGINE = env('DATABASE_ENGINE')
DJANGO_NAME = env('DATABASE_NAME')
DJANGO_USER = env('DATABASE_USER')
DJANGO_PASSWORD = env('DATABASE_PASSWORD')
DJANGO_HOST = env('DATABASE_HOST')
DJANGO_PORT = env('DATABASE_PORT')

DATABASES = {
    'default': {
        'ENGINE': DJANGO_ENGINE, 
        'NAME': DJANGO_NAME, 
        'USER': DJANGO_USER, 
        'PASSWORD': DJANGO_PASSWORD, 
        'HOST': DJANGO_HOST, 
        'PORT': DJANGO_PORT
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE':10, 
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'VRWare.authentication.TokenAuthentication.TokenAuthentication'
        'rest_framework.authentication.SessionAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': []
}

SOCIAL_AUTH_POSTGRES_JSONFIELD = True

# These are the default values for the social auth pipeline: https://python-social-auth.readthedocs.io/en/latest/pipeline.html
# Social auth will work without this variable decalred here. But we had to add the create_profile function, therefore, we needed to include all the default values 
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'login.create_profile'
)

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.google.GoogleOAuth2',
)

AUTH_USER_MODEL = 'users.CustomUser'

# For file uploads
# The location of the iploaded file will be in MEDIA_ROOT/images
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# I don't think this is neeeed
#MEDIA_URL = '/media/'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

# https://stackoverflow.com/questions/35032159/how-to-set-simple-password-in-django-1-9/35032185
"""
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
"""


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
#STATIC_ROOT = '/home/vrware/VRWareWebApp/Backend/static/'
STATIC_ROOT = BASE_DIR+'/static/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'standard': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'simple',
        },
        'info_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'info.debug',
            'formatter': 'standard',
        },
        'console': {
            'class': 'logging.StreamHandler'
        },
        'celery_handler': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'celery.log',
            'formatter': 'simple',
        }
    },
    'loggers': {
        '': {
            'handlers': ['info_file'],
            'level': 'INFO',
            'propagate': True
        },
        'django':{
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'celery': {
            'handlers':['celery_handler'],
            'level':'ERROR',
            'propagate': True,
        },
    },
}